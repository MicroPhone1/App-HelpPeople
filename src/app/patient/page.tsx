'use client';
import { useEffect, useRef, useState } from "react";
import io, { Socket } from "socket.io-client";

const TRIGGERS = [
  { keyword: "‡∏´‡∏ô‡∏±‡∏Å", label: "‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥ (‡∏õ‡∏ß‡∏î‡∏´‡∏ô‡∏±‡∏Å)" },
  { keyword: "‡πÄ‡∏ö‡∏≤", label: "‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥ (‡∏õ‡∏ß‡∏î‡πÄ‡∏ö‡∏≤)" },
  { keyword: "‡∏ô‡πâ‡∏≥", label: "‡∏Ç‡∏≠‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥" },
  { keyword: "‡∏Ç‡πâ‡∏≤‡∏ß", label: "‡∏Ç‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£/‡∏´‡∏¥‡∏ß‡∏Ç‡πâ‡∏≤‡∏ß" },
  { keyword: "‡∏ä‡πà‡∏ß‡∏¢‡∏î‡πâ‡∏ß‡∏¢", label: "‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô" },
  { keyword: "‡πÄ‡∏à‡πá‡∏ö", label: "‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡πÄ‡∏à‡πá‡∏ö)" },
  { keyword: "‡∏õ‡∏ß‡∏î", label: "‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏õ‡∏ß‡∏î)" },
];

export default function Patient() {
  const [isListening, setIsListening] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [lastCommand, setLastCommand] = useState<string | null>(null);
  const socketRef = useRef<Socket | null>(null);
  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  const isRecognizingRef = useRef(false);
  const isUnmountedRef = useRef(false);

  // --- Connect to Socket.IO ---
  useEffect(() => {
    const socket = io("http://localhost:4000", {
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000,
    });
    socketRef.current = socket;

    socket.on("connect", () => {
      setError(null);
      setLastCommand("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      clearTimeout(timeoutRef.current!);
      timeoutRef.current = setTimeout(() => setLastCommand(null), 2000);
    });

    socket.on("connect_error", (err) => {
      setError(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ${err.message}`);
    });

    return () => {
      socket.disconnect();
      socketRef.current = null;
    };
  }, []);

  // --- Voice Recognition ---
  useEffect(() => {
    isUnmountedRef.current = false;

    const SpeechRecognition: typeof window.SpeechRecognition | undefined =
      window.SpeechRecognition || window.webkitSpeechRecognition;

    if (!SpeechRecognition) {
      setError("‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ Chrome ‡∏´‡∏£‡∏∑‡∏≠ Edge");
      return;
    }

    const recognition = new SpeechRecognition();
    recognition.lang = "th-TH";
    recognition.continuous = true;
    recognition.interimResults = false;

    recognition.onstart = () => {
      isRecognizingRef.current = true;
      if (!isUnmountedRef.current) setIsListening(true);
    };

    recognition.onresult = (event: SpeechRecognitionEvent) => {
      const transcript = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
      TRIGGERS.forEach((t) => {
        if (transcript.includes(t.keyword)) {
          setLastCommand(t.label);
          clearTimeout(timeoutRef.current!);
          timeoutRef.current = setTimeout(() => setLastCommand(null), 3000);

          // ‡∏™‡πà‡∏á event ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
          socketRef.current?.emit("alert", {
            message: t.label,
            keyword: t.keyword,
            time: new Date().toLocaleTimeString("th-TH", { hour12: false }),
            transcript,
          });
        }
      });
    };

    recognition.onerror = (event: SpeechRecognitionErrorEvent) => {
      isRecognizingRef.current = false; // <--- ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!
      if (!isUnmountedRef.current) setError(`‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${event.error}. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏π‡∏î‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏á‡∏µ‡∏¢‡∏ö`);
      // ‡πÑ‡∏°‡πà start() ‡∏ã‡πâ‡∏≥‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏£‡∏≠ onend
      recognition.stop();
    };

    recognition.onend = () => {
      isRecognizingRef.current = false;
      if (!isUnmountedRef.current) setIsListening(false);
      setTimeout(() => {
        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô start ‡∏ã‡πâ‡∏≥
        if (!isUnmountedRef.current && !isRecognizingRef.current) {
          try {
            recognition.start();
          } catch (e) {
            // ignore error, ‡∏ñ‡πâ‡∏≤‡∏ï‡∏¥‡∏î error ‡πÅ‡∏ö‡∏ö already started ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏£‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤
          }
        }
      }, 1000);
    };

    // --- Start ‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô mount ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ü‡∏±‡∏á)
    try {
      recognition.start();
      isRecognizingRef.current = true;
    } catch (e) {
      // ignore
    }

    recognitionRef.current = recognition;

    return () => {
      isUnmountedRef.current = true;
      recognition.stop();
      recognitionRef.current = null;
      isRecognizingRef.current = false;
      clearTimeout(timeoutRef.current!);
    };
  }, []);

  // --- UI ---
  return (
    <main className="flex flex-col min-h-screen items-center justify-center bg-gray-100 p-4">
      <h2 className="text-2xl font-bold text-red-600 mb-4">üö® ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á (AUTO)</h2>
      <p className="text-lg text-gray-700 mb-4">‡∏û‡∏π‡∏î‡∏Ñ‡∏≥‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•:</p>
      <ul className="list-disc list-inside mb-6">
        {TRIGGERS.map((t, i) => (
          <li key={i} className="text-gray-800">
            <span className="font-semibold">{t.keyword}</span> ‚Äî {t.label}
          </li>
        ))}
      </ul>
      <div className="flex gap-2 mb-4 flex-wrap justify-center">
        {TRIGGERS.map((t, i) => (
          <button
            key={i}
            className="px-3 py-1 bg-teal-500 text-white rounded-lg hover:bg-teal-600"
            onClick={() =>
              socketRef.current?.emit("alert", {
                message: t.label,
                keyword: t.keyword,
                time: new Date().toLocaleTimeString("th-TH", { hour12: false }),
                transcript: t.keyword,
              })
            }
          >
            {t.keyword}
          </button>
        ))}
      </div>
      {isListening ? (
        <div className="flex items-center gap-2">
          <svg className="animate-pulse w-6 h-6 text-teal-500" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z" />
            <path d="M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z" />
          </svg>
          <p className="text-teal-500 font-medium" aria-live="polite">
            ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‚Ä¶
          </p>
        </div>
      ) : (
        <p className="text-red-500 font-medium" aria-live="polite">
          ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‚Ä¶
        </p>
      )}
      {lastCommand && (
        <p className="text-green-500 mt-4 animate-pulse" aria-live="polite">
          ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {lastCommand}
        </p>
      )}
      {error && (
        <p className="text-red-600 mt-4 bg-red-100 p-3 rounded-lg" aria-live="assertive">
          {error}
        </p>
      )}
    </main>
  );
}
